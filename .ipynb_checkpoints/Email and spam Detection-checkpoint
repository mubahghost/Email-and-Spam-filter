{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "d4fb8d87",
   "metadata": {},
   "source": [
    "# Part A Background Research\n",
    "\n",
    "classification algorithms are types of machine learning that is used to categorise items. The goal of classification alogorithms are to learn from input and output data and recognise patterns within the data to make a prediction based of it. This can include text images and numerical data.[20]\n",
    "\n",
    "One classification alogrithm type is Naive Bayes which is used in text classficiation and spam filtering. Using probability it makes assumptions basef of the conditions it has been set. It is trained on labelled data where it looks for features within the data and using this they are able to label it with a class because of the type of features within the data. To make predictions it will identify which class has the highest probability and assign it to the predicted class. [19]\n",
    "\n",
    "Ai can be used for spam and email filtering because it is able to work with big sums of data in textual form which it can process and scan through the data to find any unwanted or potentially harmful data such as links within spam emails. AI can use be used to add spam filters which can detect and stop malware attacks. AI can also protect users from spam emails which become repetitive and hard to clear which then in return can help with any security issues within the system. This is a great way of tackling this because it betters the user experience alongside adding an extra layer of security providing users with an ease of mind.[11]\n",
    "\n",
    "\n",
    "AI can scan through and identify emails a higher level, it can identify patterns and behaviours which spam emails which then it will study and find ways to filter it out by using data obtained from the emails. The AI will accurately filter out spam based of off common signs such malicious IP addresses that have been used previously or a common IP address, it also will look out for words within the email to identify certain commands or statements which are potentially harmful. AI is also able to look through an email attachment which can be vital as some spam or malicious emails contain viruses which if the user were to download it will cause issues within their system.The characteristics of the spam mail is a huge clue and pattern for an AI to follow, it will react based of whether it is spam or not based on the contents of what the email has.[9][10]\n",
    "\n",
    "Due to AI being versatile in the way that it can produce or build effective and sophisticated spam emails however also gain knowledge based the build which will and can be used to alter or work on better ways of avoiding them. They can use the knowledge of how sophisticated spam emails are created and can develop new barriers to stop the flow of these spam emails. Some examples include emails which users have not signed up for such as marketing emails. These flow through majority of users inbox however with the use of AI and its filters the unwanted data is transported data is moved straight away to the spam section.[9]\n",
    "\n",
    "\n",
    "AI filters can process a massive number of emails throughout the day which it can use to also learn and develop knowledge on how spam emails change or the difference between them whether it is based on the language used or the different types of attachment involved within to better protect the user from these potentially harmful data. This also makes it more effective as it can also block and remove unwanted emails which can waste the time of user as they may need to go through each one to see whether it is important or not. This relates to a technique called natural language processing  which is a common tehcnique used within Spm and email filtering this will be further discussed in part B.[12]\n",
    "\n",
    "To conclude, AI is very important in development of the filters used within email systems to manage unwanted emails since it provides and learns how to tackle them more accurately. It does this by enabling them to adapt to evolving spamming techniques and protect users from unwanted and potentially harmful emails. It also saves time for users as they can just be exposed to real emails within the system that they use and not have to go through filtering their emails manually.[9] [10][11]\n",
    "\n",
    "\n",
    "# partB\n",
    "Natural language processing-\n",
    "\n",
    "Natural Language Processing (NLP) is a combination of computer techniques and linguistic techniques that combine to provide a basic structure of what can be deemed as natural language and compare it with a structure that an AI or a bot has used. It has a goal of working with computers to be able to interpret how humans read write and based on that can also manipulate human language to then distinguish what is different and what is natural.\n",
    "\n",
    "Natural language processing uses two systems which are either processing natural language datasets using rule-based system or machine learning approach. Natural language processing does this to allow computers to understand what the documents hold. For example, it would run through the file to check if it is safe or check to see whether it has malicious data. The malicious data can be in the form of text documents, sentences keywords or phrases which is the input data. The AI technique can then gather and use the information from the grammar the email is useing to categorize and organize data by assining it a class which is then used to identify whether it is spam or ham. This can be applied to Email and Spam filter as it can read between a human generated peice of data an an AI written or third party written. [1]  [2]  [3]  [12] [14] [21]\n",
    "\n",
    "# What are the advantages of using Natural Language Processing:\n",
    "\n",
    "Natural language processing conducts a deep data analysis. This is essential as data must be thoroughly checked within emails to make sure it doesn’t miss any details. NLP scans through large amounts of textual data with ease and can analyse it at a good pace which allows the AI technique to take time with the bigger sets of data within the spam email such as documents and do a thorough search of any unstructured data so that it can come to an ultimate decision of either allowing the email to be sent to the user or prevent the user from receiving it if there is a possibility of malicious material inside the email. Essentially the speed is an advantage as it can get through the checks it needs to conduct at a good pace.[14]\n",
    "z\n",
    "NLP relies on its speed for conducting checks. These checks are essential and since the speed is one of the determining factors of a successful AI technique. It is very important to implement an AI technique which is fast at reading through data as it will always be up to date with how newly formed spam emails are likely to be structured or the way it is being sent and the contents of the email changing. This is a benefit as the AI alongside providing quick reactions to emails is also learning alongside it to keep itself updated with new threats to users.[5]\n",
    "\n",
    "NPL is also an evolving AI technique, so it learns alongside checking vast amounts of data. It has developed its understanding of working through unstructured data and has also picked up on the language used by certain users. The languages are formal and with the use of analysed data NPL can also recognise slang which it can use to separate spam from emails. This makes it very difficult for any data that is unwanted to pass through a user’s inbox as NPL will be able to catch any malicious data within again the contents of the email. Essentially it is very hard to bypass NPL checks whether the user is speaking in formal tone or informal. This is another bonus as it also acts as a security layer. [4][6] [12]\n",
    "\n",
    "# What are the disadvantages of using Natural language processing:\n",
    "\n",
    "Using natural language processing there are certain issues that users are concerned with. One issue is privacy concerns. This is because natural language processing analyses large sums of data some of the data that users send each other can be very sensitive or highly confidential. Natural language processing having access to it can prove to be an issue because a security breach can happen with the natural language processing which can leak or allow a third-party user can view sensitive data. Emails with bank details or sensitive data forms such as birth certificates can end up in the hands of the wrong individuals or a group of people.[6]\n",
    "\n",
    "\n",
    "There are different forms and ways of writing some users may choose to write in a different language or style of writing which NLP is not up to date with. This may give inaccurate data or will not be fairly analysed due to the AI not understanding the different languages or style of writing and may view it as spam and not allow the recipient to receive it. Spam mail can contain the use of new formed slang which can be used to further push it to a user.[6]\n",
    "\n",
    "\n",
    "Human trust is another disadvantage of using natural language processing. Since NLP is constantly learning and deciphering hidden malicious data it makes humans weary of how quickly or how complex the algorithm it uses to solve issues. Humans could and want to know how the algorithm works by being able to understand the goals of what the AI achieves and the process it uses to complete this. Using a process that humans don’t understand very well can raise concerns. Newly formed sophisticatd Spam emails can contain heavy files which can cause issues as they can be attached with a virus through links or attachments and upon opening the users device will be infected with it.[6]\n",
    "\n",
    "The time it takes for an NLP to be more accurate can take weeks. The training can take a while therefore resulting in inaccurate and data can be filtered incorrectly. Time is valuable and the more time it takes for NLP to adjust to the data and provide accurate results it may not be able to recognise certain malicious data and a user can receive and open it which will cause problems within their security and system. Time saved is the whole purpose of an email and since sophisticated spam emails are being created every single day it can be tough to keep it upto date with new variations and types. This can also prove slightly costly since the time it takes to train to a very accurate level will require materials and an evironment suitable for it to develop.[13] [5] [6] [12] \n",
    "\n",
    "\n",
    "\n",
    "# Machine learning  \n",
    "\n",
    "Machine learning is a study of statistical algorithms that learn and develop their understanding from data that they use to make predictions and decisions based on that. Machine learning is very effective in the fact that it does not require a human interaction for it to learn. It learns and improves itself independently and can work on tasks that a user has not programmed it to do. Machine learning has been developed over a very long period and has so far been developed and broken down into three different ways that machine learning approaches how it operates. Spam emails tend to follow similar way oof writing or certain keywords used. Using this machine learning can come to decisions through predictions it is able to form. This can also be used to match content with what is considered spam using what its learned from training data and seperate them from real emails.[9] [8] [20]\n",
    "\n",
    "Supervised Learning is when a computer is given instructions, and it follows those to give an output in simple terms. Technically it is a way for a computer to get an input from a user and provide an output that the user desires. It essentially is just limited to develop by what the requirements it has been given by a user and stick to those to learn to further develop itself. This form of machine learning uses labels to train itself. This can be used for Spam and email filtering as we can instruct the AI to watch out for certain patterns that suggest a malicious activity taking place and using the instructions it can display the output of its findings by grouping data with the class that it is similar to. [7][14]\n",
    "\n",
    "Unsupervised Learning finds patterns in data that are not labelled. This allows it to be able to run through unstructured data. It has essentially related to a system which has been given data but it doesnt include the answer. It uses the data to identify patterns and come to a judgment based of what it has been given as data and the set guide that it follows.[7]\n",
    "\n",
    "Reinforcement Learning is when a model is trained and learns to make decisions in a sequence like a trial and error method. This way it trains helps it adopt a feedback system in which a positive interaction is rewarded, and a negative interaction is given a penalty as it interacts with an environment. The negative in the problem domain would be the spam and the positive will be the emails that is analyses.[7]\n",
    "\n",
    "essentially using the above 3 techniques machine learning develops its understanding by identifying patterns from data, using this they can make decisions and predictions based on what they have learnt.[7][8]\n",
    "\n",
    "\n",
    "\n",
    "# Advantages of Machine learning\n",
    "\n",
    "Machine learning advantages are:\n",
    "\n",
    "Machine learning is efficient in the way that it can analyse large sums of data and find the patterns and based of that make a quick decision. It does this without the need for a human’s interaction with it which allows it to flow much quicker. It saves time this way as it doesn’t require a human to intervene and give it instructions. This can be applied to the problem domain as we require a system that can analyse large sums of data so that it learns all the variations of spam and a standard email to come to conclusions.[15]\n",
    "\n",
    "Machine learning is self-improving. It develops by learning and developing an algorithm since it has learned to correct its mistakes on its own. Certain predictions it develops are refined and improved by learning from its mistakes. If the system doesnt detect an issue the first time around it will use its prior knowledge to better itself. Certain spam emails may creep through but using this system it will catch on to how it is wrong and will correct itself.[14]\n",
    "\n",
    "Machine learning has a lot of influence in real world applications. It is a widely used form of AI to develop fields such as businesses and medical. They can use machine learning to develop understanding of statistics and patterns within data to form predictions. This can be applied to research into Cancer and other forms of diseases within the world.[15][16]\n",
    "\n",
    "\n",
    "# Disadvantages of Machine learning\n",
    "\n",
    "The disadvantages of machine learning include:\n",
    "\n",
    "For machine learning to work effectively and provide accurate results and data it requires complex data. The complex data must have been in a variety of different types for it to be able to make predictions based on the patterns obtained. Essentially without the use of useful and complex data machine learning is not able to develop itself but having to try to get complex data is a time heavy process.[14]\n",
    "\n",
    "Due to the previous disadvantage machine learning can produce bias and incorrect predictions. These are errors that can be develop and mislead the AI which then in turn causes it to be bias and the AI can be trained to be Bias or produce results that do not relate to the problem it is trying to solve. It can be time consuming to identify the errors as machine learning allows the AI to continue without understanding or displaying the desired output.[14][15]\n",
    "\n",
    "As with natural language processing it is very difficult for humans to try to understand the way that an AI operates using machine learning. it can cause security concerns as a user may not understand what an AI is doing with data or whether it is leaking or storing sensitive data. Emails can contain govt documents or even bank details which can be leaked.[7]\n",
    "\n",
    "There are some limitations when using Machine learning as it can be challenging for a user to keep up with and attempt to understand the thought process behind which it produces decisions. Linear regression a type of supervised learning can be confusing and not easily interpretable.[14]\n",
    "\n",
    "# Rule based\n",
    "\n",
    "A rule-based system is a method that can be adopted into training an AI. This is a method that uses rules from a user which are used to categorise data and develop an order for it. It essentially develops on the rules given to it and attempts to behave and react to data as a human would. Using rules it tries to identify what it needs to look for using patterns that it analyses or has been told to look for.[17]\n",
    "\n",
    "It uses if-then statements to guide and make decisions. The process it follows allow it to decide based on the what the user has instructed the AI to do. Based on given instructions it will follow that train of logic and thought to come to a decision and follow through the system. Similarly to the other techniques this model also learns based of the patterns it has analysed and what triggers it to make an assumption such as certain tone or contents such as textual data within spam emails.[17]\n",
    "\n",
    "There are techniques within a rule-based system which include a Rule machine learning. This type of a rule-based system learns by identifying refining and evolving with the rules it has been given. Using the rules, it collectively concludes and justification for its output based on the rules it is following. This is different to how common machine learning algorithms are used as conventional machine learning algorithms identify a singular pattern but using a rule-based system you can explore multiple patterns.[17]\n",
    "\n",
    "Essentially a rule-based system is an AI that requires human intervention to function at its highest capacity. It can also be programmed where it uses a hybrid model that introduces aspects of machine learning within the system to further develop its understanding of data.[8]\n",
    "\n",
    "# Advantages of Rule based\n",
    "\n",
    "The advantages of a rule-based system:\n",
    "\n",
    "It is interpretable and its explanation are easy to understand. Since we humans can command the AI with the instructions and what it needs to do it limits it and keeps developing its understanding which a human can begin to breakdown and understand much easier than any complex ways that other techniques use to come to a conclusion and display certain types of predictions.[8]\n",
    "\n",
    "Humans setting the instructions for the AI opens space for it to be customised to needs. This is an advantage of using this technique as humans can customise it to whatever they require and change it back to its original form by reinputting the instructions for the system. This way you can streamline and increase performance for certain types of tasks by instructing the AI to focus on that specific data.[8]\n",
    "\n",
    "Since the AI technique is being instructed and a user is providing the rules there is less space for error from the AI side since it is only following what it has been instructed to do. This can provide highly accurate data whilst simultaneously reducing the error rate.[17]\n",
    "\n",
    "As mentioned, before it limits the type of output it gives out therefore reducing the chances for outputs that a user may not need or want. This is an advantage because it strictly sticks to the rules it has been given and does not offer extra or a different way of getting an output using a more complex way of identifying the patterns within the data.[17]\n",
    "\n",
    "AI can be restricted to what it knows and specific ways it can find patterns and learn from data. Combining the human factor within AI is very practical and works to make an algorithm that can tackle different types of scenarios it has been put through. These can be different to what a technique normally analyses but using the rules a human can instruct it to look through different aspects to come to a conclusion.[8]\n",
    "\n",
    "# Disadvantages of Rule based\n",
    "\n",
    "The disadvantages of a rule-based system include:\n",
    "\n",
    "A rule-based system is limited to the rules set which it follows. This can mean that when certain types of data require a different approach to understanding a rule-based system is limited by the rules that has been set. New ways of creating sophisticated spam emails are being created daily which will require manual edits to the rule so that the system is able to monitor and identify the patterns within the email.[17]\n",
    "\n",
    "Humans are not able to understand the complex ways of how AI approaches understanding data, but these complex ways can produce the desired output and can work to give accurate decision making. In spam and email filtering the use of a complex approach from an AI is required as it will provide an accurate output.[17]\n",
    "\n",
    "A rule-based system is built manually and can take a while to build the rules so that the AI can tackle and breakdown complex data. New forms of email may not be detected since a rule based system only follows the rules that it has been set and doesnt go beyond those.[8][17]\n",
    "\n",
    "A rule-based system sticks to what it has been preprogrammed with Changing this takes time and if this type of system is used on an industrial scale it is not very effective as it will be a very expensive process and future developments could cause further changes that it requires resulting in further expenses. As mentioned before it will be expensive to maintain since new changes to spam emails are being constructed daily.[8]\n",
    "\n",
    "\n",
    "\n",
    "# Comparison\n",
    "A rule based system is a manual heavy technique which will take alot of time to build and make sure it works to provide the required output. In this technique i will essentially build the rules which it will use to cross check data that has been given to it and based of that come to a conclusion. it is limited however as it only will follow the rules set this means it will not be able to approach data given to it outside what is been commanded to do. This can be a problem because when the ai is faced with a problem that it is not able to solve with the rules it has been set it can lead to giving innacurate results. There a different variations of a rule based approach for email and spam filtering as you can implement a rule based machine learning system as well. Hybrid models are using rule based system techniques within other techniques to build an effective model that develops on working to give accurate and more focused results.\n",
    "\n",
    "Machine learning is a different technique that can be used. It follows a different approach than a rule based system. Firstly it does not require a human to operate and analyse data it can work independantly. Since rule based requires a human to give it commands and rules to follow machine learning works with data by independantly working to work through and identify patterns. This is a useful skill which machine learning possesses as it can give interesting ways of apporaching the study of data whereas with rule based it is limited.\n",
    "\n",
    "Natural language processing requires lots of data to analyse which is very time consuming since it has to learn the langauge techniques that are being used daily and that which is of an AI. This is what is commonly used in spam and email filtering however it uses a rule based or machine learning approach to run through data and identify patterns. This similar to the other techniques as it categorises what its learnt from the data and so using this categorising system it seperates what is Ham and what is Spam. \n",
    "\n",
    "\n",
    "\n",
    "# References \n",
    "Rafat, K.F. et al. (2022) ‘Evading obscure communication from spam emails’, Mathematical biosciences and engineering : MBE, 19(2), pp. 1926–1943. Available at: https://doi.org/10.3934/mbe.2022091. [1]\n",
    "\n",
    "\n",
    "Sowmya V. B. et al. (2020) Practical natural language processing : a comprehensive guide to building real-world NLP systems. First edition. Sebastopol, CA: O’Reilly Media. [2]\n",
    "\n",
    "Thanaki, J. (2017) Python Natural Language Processing. 1st edition. Packt Publishing.[3]\n",
    "\n",
    "The Leading Social Media Listening Tools Indonesia | Dataxet:Sonar. 2023. The Benefits of Natural Language Processing (NLP). [ONLINE] Available at: https://sonarplatform.com/the-benefits-of-natural-language-processing-nlp/. [Accessed 28 November 2023].[4]\n",
    "\n",
    "Encora. 2023. Natural Language Processing with Machine Learning. [ONLINE] Available at: https://www.encora.com/insights/natural-language-processing-with-machine-learning. [Accessed 28 November 2023].[5] \n",
    "\n",
    "Alex Ivankov. 2023. Natural Language Processing: Advantages and Disadvantages - Profolus. [ONLINE] Available at: https://www.profolus.com/topics/natural-language-processing-advantages-and-disadvantages/. [Accessed 28 November 2023].[6]\n",
    "\n",
    "Kerrigan, C. (ed.) (2022) Artificial intelligence : law and regulation. Cheltenham, England ; Edward Elgar Publishing.[7]\n",
    "\n",
    "Anon, (2023). Rule-based System In Artificial Intelligence Explained - Dataconomy. [online] Available at: https://dataconomy.com/2023/04/25/rule-based-system-in-artificial-intelligence/https://dataconomy.com/2023/04/25/rule-based-system-in-artificial-intelligence/ [Accessed 28 Nov. 2023].  [8]\n",
    "\n",
    "Idris, I. et al. (2015) ‘A combined negative selection algorithm–particle swarm optimization for an email spam detection system’, Engineering applications of artificial intelligence, 39, pp. 33–44. Available at: https://doi.org/10.1016/j.engappai.2014.11.001.[9]\n",
    "\n",
    "www.unite.ai. (n.d.). AI and Spam: How Artificial Intelligence Protects Your Inbox - Unite.AI. [online] Available at: https://www.unite.ai/ai-and-spam/.[10]\n",
    "\n",
    "What is Natural Language Processing (NLP)? | SAS UK. 2023. What is Natural Language Processing (NLP)? | SAS UK. [ONLINE] Available at: https://www.sas.com/en_gb/insights/analytics/what-is-natural-language-processing-nlp.html#:~:text=Natural%20language%20processing%20helps%20computers,determine%20which%20parts%20are%20important.. [Accessed 29 November 2023] [11]\n",
    "\n",
    "Kochmar, E. (2022) Getting started with natural language processing. Shelter Island, New York: Manning Publications Company.[12]\n",
    "\n",
    "Ganegedara, T. (2018) Natural Language Processing with TensorFlow: Teach language to machines using Python’s deep learning library. 1st edn. Birmingham: Packt Publishing.[13]\n",
    "\n",
    "Dineva, K. & Atanasova, T. 2020, SYSTEMATIC LOOK AT MACHINE LEARNING ALGORITHMS – ADVANTAGES, DISADVANTAGES AND PRACTICAL APPLICATIONS, Surveying Geology & Mining Ecology Management (SGEM), Sofia.[14]\n",
    "\n",
    "Team, T. (2020). Exploring the Advantages and Disadvantages of Machine Learning. [online] TechVidvan. Available at: https://techvidvan.com/tutorials/advantages-and-disadvantages-of-machine-learning/.[15]\n",
    "\n",
    "MCCARTHY, J.F., MARX, K.A., HOFFMAN, P.E., GEE, A.G., O’NEIL, P., UJWAL, M.L. and HOTCHKISS, J. (2004). Applications of Machine Learning and High-Dimensional Visualization in Cancer Detection, Diagnosis, and Management. Annals of the New York Academy of Sciences, 1020(1), pp.239–262. doi:https://doi.org/10.1196/annals.1310.020.[16]\n",
    "\n",
    "Engati. 2023. Rule-Based System | Engati. [ONLINE] Available at: https://www.engati.com/glossary/rule-based-system. [Accessed 05 December 2023].[17]\n",
    "\n",
    "Aueb.gr. (2023). The Enron-Spam datasets. [online] Available at: https://www2.aueb.gr/users/ion/data/enron-spam/.[18]\n",
    "\n",
    "IBM (2023). What is Naïve Bayes | IBM. [online] www.ibm.com. Available at: https://www.ibm.com/topics/naive-bayes.[19]\n",
    "\n",
    "azzar, M., Yousef, R.F. and Eleyan, D. (2021) ‘Evaluation of Machine Learning Techniques for Email Spam Classification’, International Journal of Education and Management Engineering, 11(4), pp. 35–42. Available at: https://doi.org/10.5815/ijeme.2021.04.04.[20]\n",
    "\n",
    "Lutkevich, B. (2021). What is Natural Language Processing? An Introduction to NLP. [online] SearchEnterpriseAI. Available at: https://www.techtarget.com/searchenterpriseai/definition/natural-language-processing-NLP. [21]\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ecbcec89",
   "metadata": {},
   "source": [
    "# Describe the input required for your implementation: graph, time series, etc. Where will youget the data? Does the data need to be prepared in a specific format?\n",
    "\n",
    "The data i am using is from a data set is from kaggle which is in tabular format. It includes the rows and columns which include the content the category it is in such as if it is ham or spam.\n",
    "\n",
    "The data is available online for the public Aueb.gr. (2023). The Enron-Spam datasets (enron 3). [online] Available at: https://www2.aueb.gr/users/ion/data/enron-spam/.[18] to use and is a very good dataset since it has a large number of emails which are well distributed in the sense there is a efficient data to test and train the model with. This will allow for better training as more data that a technique uses the better the output and accuracy of predictions. It is in the form of a zip file which can be downloaded and saved within the drive or computer and requires a path to link it to the file.\n",
    "\n",
    "Data Preparation:\n",
    "The data required pre processing and was ready to use after the following. The data is clean and ready to use as it is in text form as that is how emails are written so we did not need to change any quantitative data to qualitative. The file was a different format we had to change it from a text file to a csv because it is a basic format so it is better to use a csv format and since we are using pandas as imports it works better with tabular data. \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "9928a747",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/jpeg": "",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from IPython.display import Image\n",
    "\n",
    "image_path = 'FlowchartAI.jpg'\n",
    "\n",
    "Image(filename=image_path)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "7688ec1c",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.metrics import confusion_matrix, accuracy_score, classification_report\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.metrics import confusion_matrix, accuracy_score, classification_report\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "9de64bd5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Error: The specified folder 'dataset' does not exist.\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "import csv\n",
    "\n",
    "#Importing and adding the dataset within the code\n",
    "\n",
    "data_folder = 'dataset'\n",
    "\n",
    "script_location = os.getcwd()\n",
    "dataSet_csv = os.path.join(script_location, 'emails.csv')\n",
    "\n",
    "data = []\n",
    "\n",
    "email_number = 1\n",
    "\n",
    "try:\n",
    "\n",
    "    for label in ['ham', 'spam']:\n",
    "        label_folder_path = os.path.join(data_folder, label)\n",
    "\n",
    "\n",
    "        for filename in os.listdir(label_folder_path):\n",
    "            if filename.endswith('.txt'):\n",
    "                file_path = os.path.join(label_folder_path, filename)\n",
    "\n",
    "                try:\n",
    "                 \n",
    "                    with open(file_path, 'r', encoding='utf-8', errors='ignore') as file:\n",
    "                        content = file.read()\n",
    "\n",
    "                 \n",
    "                    data.append([email_number, content, label])\n",
    "\n",
    "            \n",
    "                    email_number += 1\n",
    "\n",
    "                except Exception as e:\n",
    "                    print(f\"Error reading file {file_path}: {e}\")\n",
    "\n",
    "except FileNotFoundError:\n",
    "    print(f\"Error: The specified folder '{data_folder}' does not exist.\")\n",
    "\n",
    "except Exception as e:\n",
    "    print(f\"An unexpected error occurred: {e}\")\n",
    "\n",
    "else:\n",
    "    try:\n",
    "        with open(dataSet_csv, 'w', newline='', encoding='utf-8') as csv_file:\n",
    "            csv_writer = csv.writer(csv_file)\n",
    "\n",
    "            csv_writer.writerow(['Number', 'Content', 'Label'])\n",
    "\n",
    "            csv_writer.writerows(data)\n",
    "\n",
    "        print(f'CSV file created at {dataSet_csv}')\n",
    "\n",
    "    except Exception as e:\n",
    "        print(f\"Error writing to CSV file: {e}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "b44ea07e",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv('emails.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "6606c4a8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "      Number                                            Content Label\n",
      "0          1  Subject: key hr issues going forward\\na ) year...   ham\n",
      "1          2  Subject: congrats !\\ncontratulations on the ex...   ham\n",
      "2          3  Subject: re : key hr issues going forward\\nall...   ham\n",
      "3          4  Subject: epmi files protest of entergy transco...   ham\n",
      "4          5  Subject: california power 2 / 8\\nplease contac...   ham\n",
      "...      ...                                                ...   ...\n",
      "5507    5508  Subject: need your vics ?\\nbrand name meds suc...  spam\n",
      "5508    5509  Subject: hey ! tell your friends to hit me up\\...  spam\n",
      "5509    5510  Subject: = ? iso - 8859 - 1 ? q ? v = colllum ...  spam\n",
      "5510    5511  Subject: dear sir , i am interested in it\\nhi ...  spam\n",
      "5511    5512  Subject: = ? iso - 8859 - 1 ? q ? v = eollum _...  spam\n",
      "\n",
      "[5512 rows x 3 columns]\n"
     ]
    }
   ],
   "source": [
    "print(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "69a09510",
   "metadata": {},
   "outputs": [],
   "source": [
    "data = df.where((pd.notnull(df)),'')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "3e37dce0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Number</th>\n",
       "      <th>Content</th>\n",
       "      <th>Label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>Subject: key hr issues going forward\\na ) year...</td>\n",
       "      <td>ham</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>Subject: congrats !\\ncontratulations on the ex...</td>\n",
       "      <td>ham</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>Subject: re : key hr issues going forward\\nall...</td>\n",
       "      <td>ham</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>Subject: epmi files protest of entergy transco...</td>\n",
       "      <td>ham</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>Subject: california power 2 / 8\\nplease contac...</td>\n",
       "      <td>ham</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Number                                            Content Label\n",
       "0       1  Subject: key hr issues going forward\\na ) year...   ham\n",
       "1       2  Subject: congrats !\\ncontratulations on the ex...   ham\n",
       "2       3  Subject: re : key hr issues going forward\\nall...   ham\n",
       "3       4  Subject: epmi files protest of entergy transco...   ham\n",
       "4       5  Subject: california power 2 / 8\\nplease contac...   ham"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "472a1fc4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 5512 entries, 0 to 5511\n",
      "Data columns (total 3 columns):\n",
      " #   Column   Non-Null Count  Dtype \n",
      "---  ------   --------------  ----- \n",
      " 0   Number   5512 non-null   int64 \n",
      " 1   Content  5512 non-null   object\n",
      " 2   Label    5512 non-null   object\n",
      "dtypes: int64(1), object(2)\n",
      "memory usage: 129.3+ KB\n"
     ]
    }
   ],
   "source": [
    "data.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "a0999463",
   "metadata": {},
   "outputs": [],
   "source": [
    "data.loc[data['Label']=='spam','Label',]=0\n",
    "data.loc[data['Label']=='ham','Label',]=1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "109a9505",
   "metadata": {},
   "outputs": [],
   "source": [
    "x= data['Content']\n",
    "y= data['Label']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "56c129ab",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0       Subject: key hr issues going forward\\na ) year...\n",
      "1       Subject: congrats !\\ncontratulations on the ex...\n",
      "2       Subject: re : key hr issues going forward\\nall...\n",
      "3       Subject: epmi files protest of entergy transco...\n",
      "4       Subject: california power 2 / 8\\nplease contac...\n",
      "                              ...                        \n",
      "5507    Subject: need your vics ?\\nbrand name meds suc...\n",
      "5508    Subject: hey ! tell your friends to hit me up\\...\n",
      "5509    Subject: = ? iso - 8859 - 1 ? q ? v = colllum ...\n",
      "5510    Subject: dear sir , i am interested in it\\nhi ...\n",
      "5511    Subject: = ? iso - 8859 - 1 ? q ? v = eollum _...\n",
      "Name: Content, Length: 5512, dtype: object\n"
     ]
    }
   ],
   "source": [
    "print (x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "c78e96b7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0       1\n",
      "1       1\n",
      "2       1\n",
      "3       1\n",
      "4       1\n",
      "       ..\n",
      "5507    0\n",
      "5508    0\n",
      "5509    0\n",
      "5510    0\n",
      "5511    0\n",
      "Name: Label, Length: 5512, dtype: object\n"
     ]
    }
   ],
   "source": [
    "print (y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "a7a20678",
   "metadata": {},
   "outputs": [],
   "source": [
    "x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "7dda196c",
   "metadata": {},
   "outputs": [],
   "source": [
    "feature_extraction = TfidfVectorizer(min_df=1, stop_words='english', lowercase=True)\n",
    "x_train_features = feature_extraction.fit_transform(x_train)\n",
    "x_test_features = feature_extraction.transform(x_test)\n",
    "\n",
    "y_train=y_train.astype('int')\n",
    "y_test=y_test.astype('int')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "195ea4c5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3583    Subject: interest rates\\njohn / louise -\\ngive...\n",
      "250     Subject: re :\\n( 1 ) kopper isn ' t ews but i ...\n",
      "3145    Subject: good question ( s )\\ni can answer som...\n",
      "3511    Subject: netco p & l ' s\\ncan i get a list of ...\n",
      "1794    Subject: delegation of authority\\nlouise :\\nat...\n",
      "                              ...                        \n",
      "789     Subject: west power orig update\\nchange in gro...\n",
      "968     Subject: ews otc discussions on individual bu ...\n",
      "1667    Subject: urgent - vp candidate dale furrow\\nev...\n",
      "3321    Subject: broker client\\nonce we have a buyer ,...\n",
      "1688    Subject: fw : on - line stock trading brown ba...\n",
      "Name: Content, Length: 4409, dtype: object\n"
     ]
    }
   ],
   "source": [
    "print(x_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "1f62ba06",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  (0, 25188)\t0.14099289907149226\n",
      "  (0, 27122)\t0.2614082696973485\n",
      "  (0, 39790)\t0.18960535682867366\n",
      "  (0, 37839)\t0.1815401244213774\n",
      "  (0, 3586)\t0.14543442897208989\n",
      "  (0, 20657)\t0.14514102922959868\n",
      "  (0, 25598)\t0.11125837116286172\n",
      "  (0, 13272)\t0.4279864485321137\n",
      "  (0, 30752)\t0.09651391047430925\n",
      "  (0, 38628)\t0.15063593270750952\n",
      "  (0, 8199)\t0.17586997279891312\n",
      "  (0, 32273)\t0.12315494502399056\n",
      "  (0, 30917)\t0.2242854741155578\n",
      "  (0, 44372)\t0.16762233822053307\n",
      "  (0, 42990)\t0.15080527695980037\n",
      "  (0, 15632)\t0.19465930335089543\n",
      "  (0, 38146)\t0.12474088633565421\n",
      "  (0, 36381)\t0.44219717167300093\n",
      "  (0, 44378)\t0.11964434174788241\n",
      "  (0, 6833)\t0.14558198618528775\n",
      "  (0, 34125)\t0.250339049721772\n",
      "  (0, 13248)\t0.12258700587706921\n",
      "  (0, 20791)\t0.13690054867774895\n",
      "  (0, 27726)\t0.08195766932741369\n",
      "  (0, 25370)\t0.11031506059749976\n",
      "  :\t:\n",
      "  (4408, 1610)\t0.05751146736526087\n",
      "  (4408, 321)\t0.04531697553721224\n",
      "  (4408, 1203)\t0.09229759772413086\n",
      "  (4408, 15055)\t0.05496888147164359\n",
      "  (4408, 20170)\t0.045033681295561394\n",
      "  (4408, 39704)\t0.11430180980090948\n",
      "  (4408, 11460)\t0.06133066009542501\n",
      "  (4408, 24480)\t0.06331634846251713\n",
      "  (4408, 1052)\t0.05121139477875741\n",
      "  (4408, 21086)\t0.06100124499120072\n",
      "  (4408, 12892)\t0.051742005216976715\n",
      "  (4408, 487)\t0.05369454043224282\n",
      "  (4408, 809)\t0.04686882980510756\n",
      "  (4408, 35284)\t0.06735132697886702\n",
      "  (4408, 405)\t0.04572733669897844\n",
      "  (4408, 11346)\t0.07412120498824872\n",
      "  (4408, 34265)\t0.03856104109496808\n",
      "  (4408, 818)\t0.0658442985807669\n",
      "  (4408, 19925)\t0.0492530776116085\n",
      "  (4408, 39672)\t0.03373889136149723\n",
      "  (4408, 29167)\t0.034233925556443896\n",
      "  (4408, 32344)\t0.035938032468924686\n",
      "  (4408, 17219)\t0.43194025744451797\n",
      "  (4408, 44378)\t0.295518465669651\n",
      "  (4408, 42234)\t0.031161508095273866\n"
     ]
    }
   ],
   "source": [
    "print(x_train_features)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "19d1c3fb",
   "metadata": {},
   "outputs": [],
   "source": [
    "model = LogisticRegression()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "556b1f23",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression()</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "LogisticRegression()"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.fit(x_train_features,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "91821719",
   "metadata": {},
   "outputs": [],
   "source": [
    "prediction_on_training_data = model.predict(x_train_features)\n",
    "accuracy_on_training_data = accuracy_score(y_train, prediction_on_training_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "ec63ea90",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy on training data: 99.91%\n"
     ]
    }
   ],
   "source": [
    "Score_percentage = accuracy_on_training_data * 100\n",
    "\n",
    "print(f\"Accuracy on training data: {Score_percentage:.2f}%\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "3ed642c9",
   "metadata": {},
   "outputs": [],
   "source": [
    "prediction_on_test_data = model.predict(x_test_features)\n",
    "accuracy_on_test_data= accuracy_score(y_test,prediction_on_test_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "f55e6a69",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy on testing data: 98.82%\n"
     ]
    }
   ],
   "source": [
    "Score_percentage = accuracy_on_test_data * 100\n",
    "\n",
    "print(f\"Accuracy on testing data: {Score_percentage:.2f}%\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "711a076f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1]\n",
      "Ham\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy on test data: 98.82%\n",
      "Classification Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.99      0.96      0.98       290\n",
      "           1       0.99      1.00      0.99       813\n",
      "\n",
      "    accuracy                           0.99      1103\n",
      "   macro avg       0.99      0.98      0.98      1103\n",
      "weighted avg       0.99      0.99      0.99      1103\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# we can use this to manually check the data\n",
    "input_mail = [\n",
    "    \"Subject: key hr issues going forward\"\n",
    "    \"a ) year end reviews - report needs generating like mid - year documenting business unit performance on review completion - david to john ;\"\n",
    "    \"b ) work out or plan generation for the nim / issues employees - david to john ;\"\n",
    "    \"c ) hpl transition issues - ongoing .\"\n",
    "    \"regards\"\n",
    "    \"delainey\"\n",
    "]\n",
    "\n",
    "input_data_features = feature_extraction.transform(input_mail)\n",
    "prediction = model.predict(input_data_features)\n",
    "print(prediction)\n",
    "\n",
    "if(prediction[0]==1):\n",
    "    print('Ham')\n",
    "    \n",
    "else:\n",
    "    print('Spam')\n",
    "    \n",
    "# confusion matrix\n",
    "x_test_features = feature_extraction.transform(x_test)\n",
    "\n",
    "predictions_on_test_data = model.predict(x_test_features)\n",
    "\n",
    "conf_matrix_graph = confusion_matrix(y_test, predictions_on_test_data)\n",
    "\n",
    "plt.figure(figsize=(8, 6))\n",
    "sns.heatmap(conf_matrix_graph, annot=True, fmt=\"d\", cmap=\"Blues\", cbar=False,\n",
    "            xticklabels=['Spam', 'Ham',], yticklabels=['Spam', 'Ham'])\n",
    "plt.title('Confusion Matrix')\n",
    "plt.xlabel('Predicted Label')\n",
    "plt.ylabel('True Label')\n",
    "plt.show()\n",
    "\n",
    "accuracy_on_test_data = accuracy_score(y_test, predictions_on_test_data)\n",
    "print(f\"Accuracy on test data: {accuracy_on_test_data * 100:.2f}%\")\n",
    "\n",
    "print(\"Classification Report:\")\n",
    "print(classification_report(y_test, predictions_on_test_data))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "de9eda5e",
   "metadata": {},
   "source": [
    "# Testing\n",
    " \n",
    "The data represents the calculation of performance metrics on Test data that the AI technique has used. \n",
    "\n",
    "The accuracy on the test data is 98.82% which is a good sign since it means that it has predicted the class labels correctly at a percentage of 98.82% which is almost 100% accuracy.\n",
    "\n",
    "Precision\n",
    "\n",
    "Precision represents the ratio of positive predicted observations. precision is 99% for class 0 which means that the model is correct 99% of the time when it predicts or attempts to predict for class 0. Precision for class 1 is also 99% which indicates the same thing and that is that the model is able to correctly predict 99% of the times. This means 99% of the times it was able to correctly classify an email into the group it belonged to.\n",
    "\n",
    "Recall\n",
    "\n",
    "Recall represents the ability of a model to correctly identify all instances of a positive class. It is calculated as the ratio of true positives to the sum of true positives and false negatives. In the context of spam filtering, a high recall means the model is effective at identifying actual spam emails among all the true instances of spam. This is important in spam filtering as it helps minimize the number of false negatives, which is a good sign as fewer spam emails go undetected. By learning from instances where it fails to identify spam (false negatives), the model can improve its accuracy over time. For class 1 it is 100% which means that it correctly identified all the false negatives and classed them accordingly with a percentage of 100%.\n",
    "\n",
    "F1-Score\n",
    "F1-Score is the avergae of precision and recall. it shows the balance between precision and recall. the f1 score is 98% and for class 1 is it is 99%. They are both balanced in this case.\n",
    "\n",
    "\n",
    "Macro Average:\n",
    "\n",
    "A macro average is the average of the precision, recall, and F1-score of the classes. The macro average precision, recall, and F1-score are all around 99% which presents a highly effective model.\n",
    "\n",
    "Weighted Average:\n",
    "\n",
    "The weighted average is the average of the precision, recall, and F1-score, weighted by the number of instances in each class. The weighted average precision, recall, and F1-score are all around 99% which show signs of an accurate model sinc the average is high.\n",
    "\n",
    "From this testing we can say that the model is performing extremely well and that it is effective to use for the problem domain \n",
    "as it has a high accuracy and its approach of how it classifies the data.\n",
    "\n",
    "\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "332e89d0",
   "metadata": {},
   "source": [
    "# Evaluation\n",
    "The model produced expected and desirable results as it measured a high accuracy for predicting the labelled data and the dataset which i used. The dataset being a conventional dataset for an email spam filtering proved to be useful for the model since it had a good amount of data to test with and train. An area for further improvement would have been to have a larger dataset even though it was enough for the model to use and predict correcly 98% of the time. Using a larger dataset the model may have been able to correcly classify the emails 99-100% of the time.\n",
    "\n",
    "The recall being high for both classes suggest a high accuracy as a small number of false negatives were encountered and makes it a reliable model since it has flaws however using this information it can be imporved even further to the point where the model has a recall of a true 100%.\n",
    "\n",
    "A high accuracy rate provides the guide to implementing it into real world application. This is essential and the main goal of creating a classification algorithm that solves or can predict at a fast pace and with a high accuracy.since the aim is to develop it and release it into applications that users use daily. It has already been implemented into real world applications and once an accuracy of 100% is reached this model can be used in real world applications.\n",
    "\n",
    "It is an easy model to understand which anwers and provides the way of solving the problem domain. It is easy to interpret since majority of othe models are complex and require deep analysis and breakdown of it to understand the processes they undergo to come up with a prediction. Logistic regression model provides a steady flow of code with each step being easy to interpret.\n",
    "\n",
    "There is always room for improvement since we have not produced a 100% accuracy, new demonstration or approach of analysing data can be implemented different techniques could prove to be more effiecient and can produce a 100% accuracy\n",
    "\n",
    "In summary, while a 98-99% accuracy is good, an in depth evaluation and improvement i could considering the use of additional metrics and real-world impact to ensure the model is both accurate and relevant to solving the problem domain. It is very useful and a very important aspect of everyday life for users to access their emails so the demand is high but it requires a more complex approach on how it will classify real world examples and newly formed spam mails."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "46be164f",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "233edff8",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "032e2e78",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
